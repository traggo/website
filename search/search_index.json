{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Traggo is a tag-based time tracking tool. In Traggo there are no tasks, only tagged time spans . With tags , Traggo tries to be as customizable as possible, f.ex. if you work on different projects you could add a project -tag. If you like to see statistics from the different things you do, you could add a type -tag with values like email , programming , meeting . You can do it just as you like. If you want to use Traggo, you need to host it yourself. This way, you have the full control over your data and no third-party may be able to read it. Have a look at our Install Guide . Features \u00b6 easy to setup time tracking (obviously) customizable dashboards with diagrams a list and calendar view of the tracked time sleek web ui with multiple themes simple user management Install \u16eb Configuration \u16eb Setup Dev Environment Versioning \u00b6 We use SemVer for versioning. For the versions available, see the tags on this repository .","title":"Intro"},{"location":"#features","text":"easy to setup time tracking (obviously) customizable dashboards with diagrams a list and calendar view of the tracked time sleek web ui with multiple themes simple user management Install \u16eb Configuration \u16eb Setup Dev Environment","title":"Features"},{"location":"#versioning","text":"We use SemVer for versioning. For the versions available, see the tags on this repository .","title":"Versioning"},{"location":"config/","text":"Configuration \u00b6 Precedence \u00b6 traggo/server tries to obtain config from different locations in sequence. Properties will never be overridden so traggo/server will use the value of the first occurrence of a property. Order Environment Variables .env.local (in same path as the binary) .env (in same path as the binary) $HOME/.config/traggo/server.ini /etc/traggo/server.ini Properties \u00b6 Note It is recommended to change the default username/password. # the port the http server should use # TRAGGO_PORT=3030 # default username and password # TRAGGO_DEFAULT_USER_NAME=admin # TRAGGO_DEFAULT_USER_PASS=admin # bcrypt password strength (higher = more secure but also slower) # TRAGGO_PASS_STRENGTH=10 # how verbose traggo/server should log (must be one of: debug, info, warn, error, fatal, panic) # TRAGGO_LOG_LEVEL=info # the database dialect (must be one of: sqlite3) # TRAGGO_DATABASE_DIALECT=sqlite3 # the database connection string, differs depending on the dialect # sqlite3: path/to/database.db # TRAGGO_DATABASE_CONNECTION=data/traggo.db","title":"Configuration"},{"location":"config/#configuration","text":"","title":"Configuration"},{"location":"config/#precedence","text":"traggo/server tries to obtain config from different locations in sequence. Properties will never be overridden so traggo/server will use the value of the first occurrence of a property. Order Environment Variables .env.local (in same path as the binary) .env (in same path as the binary) $HOME/.config/traggo/server.ini /etc/traggo/server.ini","title":"Precedence"},{"location":"config/#properties","text":"Note It is recommended to change the default username/password. # the port the http server should use # TRAGGO_PORT=3030 # default username and password # TRAGGO_DEFAULT_USER_NAME=admin # TRAGGO_DEFAULT_USER_PASS=admin # bcrypt password strength (higher = more secure but also slower) # TRAGGO_PASS_STRENGTH=10 # how verbose traggo/server should log (must be one of: debug, info, warn, error, fatal, panic) # TRAGGO_LOG_LEVEL=info # the database dialect (must be one of: sqlite3) # TRAGGO_DATABASE_DIALECT=sqlite3 # the database connection string, differs depending on the dialect # sqlite3: path/to/database.db # TRAGGO_DATABASE_CONNECTION=data/traggo.db","title":"Properties"},{"location":"first-login/","text":"First Login \u00b6 After setting up traggo/server you can login to the WebUI. If you have not changed the default username and password in the configuration, use username: admin password: admin , but remember to change them in the WebUI for security.","title":"First Login"},{"location":"first-login/#first-login","text":"After setting up traggo/server you can login to the WebUI. If you have not changed the default username and password in the configuration, use username: admin password: admin , but remember to change them in the WebUI for security.","title":"First Login"},{"location":"install/","text":"Docker \u00b6 Setting up traggo/server with docker is pretty easy, you basically just have to start the docker container and you are ready to go: Note Before starting traggo/server you may read the Configuration , and change the default password of the admin user. The traggo/server docker images are multi-arch docker images. This means with our traggo/server image supports amd64 , 386 , ppc64le (power pc), s390x (IBM Z), arm64 , arm v7 (Raspberry PI). $ docker run -p 80 :3030 -v /opt/traggo/data:/opt/traggo/data traggo/server:latest By default traggo/server runs on port 3030. /opt/traggo/data will contain the sqlite database. This can be configured with the property TRAGGO_DATABASE_CONNECTION . See Configuration . docker-compose.yml \u00b6 version : \"3.7\" services : traggo : image : traggo/server:latest ports : - 3030:3030 environment : TRAGGO_DEFAULT_USER_NAME : \"admin\" TRAGGO_DEFAULT_USER_PASS : \"mynewpassword\" volumes : - ./traggodata:/opt/traggo/data Binary \u00b6 In this tutorial we set up traggo/server v0.0.9 on a 64 bit linux server but it should be similar on other platforms. Download the zip with the binary for your platform from traggo/server Releases . $ wget https://github.com/traggo/server/releases/download/v0.0.9/traggo-server-0.0.9-linux-amd64.zip Unzip the archive. $ unzip traggo-server-0.0.9-linux-amd64.zip Make the binary executable. $ chmod +x traggo-server-0.0.9-linux-amd64 Execute traggo/server. (By default traggo/server is started on port 3030) Note Before starting traggo/server you may read the Configuration , and change the default password of the admin user. $ sudo ./traggo-0.0.9-linux-amd64 Arch-Linux(aur) \u00b6 TODO Source \u00b6 See Build Docs .","title":"Installation"},{"location":"install/#docker","text":"Setting up traggo/server with docker is pretty easy, you basically just have to start the docker container and you are ready to go: Note Before starting traggo/server you may read the Configuration , and change the default password of the admin user. The traggo/server docker images are multi-arch docker images. This means with our traggo/server image supports amd64 , 386 , ppc64le (power pc), s390x (IBM Z), arm64 , arm v7 (Raspberry PI). $ docker run -p 80 :3030 -v /opt/traggo/data:/opt/traggo/data traggo/server:latest By default traggo/server runs on port 3030. /opt/traggo/data will contain the sqlite database. This can be configured with the property TRAGGO_DATABASE_CONNECTION . See Configuration .","title":"Docker"},{"location":"install/#docker-composeyml","text":"version : \"3.7\" services : traggo : image : traggo/server:latest ports : - 3030:3030 environment : TRAGGO_DEFAULT_USER_NAME : \"admin\" TRAGGO_DEFAULT_USER_PASS : \"mynewpassword\" volumes : - ./traggodata:/opt/traggo/data","title":"docker-compose.yml"},{"location":"install/#binary","text":"In this tutorial we set up traggo/server v0.0.9 on a 64 bit linux server but it should be similar on other platforms. Download the zip with the binary for your platform from traggo/server Releases . $ wget https://github.com/traggo/server/releases/download/v0.0.9/traggo-server-0.0.9-linux-amd64.zip Unzip the archive. $ unzip traggo-server-0.0.9-linux-amd64.zip Make the binary executable. $ chmod +x traggo-server-0.0.9-linux-amd64 Execute traggo/server. (By default traggo/server is started on port 3030) Note Before starting traggo/server you may read the Configuration , and change the default password of the admin user. $ sudo ./traggo-0.0.9-linux-amd64","title":"Binary"},{"location":"install/#arch-linuxaur","text":"TODO","title":"Arch-Linux(aur)"},{"location":"install/#source","text":"See Build Docs .","title":"Source"},{"location":"reverse-proxy/","text":"Reverse Proxy \u00b6 In these examples Traggo is running on port 3030 on localhost . nginx \u00b6 At domain root like http://domain.tld \u00b6 Proxy http://domain.tld to Traggo. upstream traggo { # Set the port to the one you are using in traggo server localhost : 3030 ; } server { listen 80 ; # If you're on localhost: # server_name localhost; server_name localhost ; location / { proxy_pass http://traggo ; } } At domain sub path like http://domain.tld/traggo/ \u00b6 Proxy http://domain.tld/traggo to Traggo. upstream traggo { # Set the port to the one you are using in traggo server localhost : 3030 ; } server { listen 80 ; # If you're on localhost: # server_name localhost; server_name domain.tld ; location /traggo/ { proxy_pass http://traggo ; rewrite ^/traggo(/.*) $1 break ; } } Apache \u00b6 At domain root like http://domain.tld \u00b6 Proxy http://domain.tld to Traggo. <VirtualHost *:80 > # If you're on localhost: # ServerName localhost ServerName domain.tld Keepalive On ProxyPass \"/\" http://localhost:3030/ retry=0 timeout=5 ProxyPassReverse / http://localhost:3030/ </VirtualHost> At domain sub path like http://domain.tld/traggo/ \u00b6 Proxy http://domain.tld/traggo to Traggo. <VirtualHost *:80 > # If you're on localhost: # ServerName localhost ServerName domain.tld Keepalive On ProxyPass \"/traggo/\" http://localhost:3030/ retry=0 timeout=5 # ^- !!trailing slash is required!! ProxyPassReverse \"/traggo/\" http://localhost:3030/ </VirtualHost> Caddy 2 \u00b6 At domain root like http://domain.tld \u00b6 Proxy http://domain.tld to Traggo. http://domain.tld { reverse_proxy localhost:3030 } At domain sub path like http://domain.tld/traggo/ \u00b6 Proxy http://domain.tld/traggo to Traggo. http://domain.tld { route /traggo/* { uri strip_prefix /traggo reverse_proxy localhost:3030 } redir /traggo /traggo/ }","title":"Reverse Proxy"},{"location":"reverse-proxy/#reverse-proxy","text":"In these examples Traggo is running on port 3030 on localhost .","title":"Reverse Proxy"},{"location":"reverse-proxy/#nginx","text":"","title":"nginx"},{"location":"reverse-proxy/#at-domain-root-like-httpdomaintld","text":"Proxy http://domain.tld to Traggo. upstream traggo { # Set the port to the one you are using in traggo server localhost : 3030 ; } server { listen 80 ; # If you're on localhost: # server_name localhost; server_name localhost ; location / { proxy_pass http://traggo ; } }","title":"At domain root like http://domain.tld"},{"location":"reverse-proxy/#at-domain-sub-path-like-httpdomaintldtraggo","text":"Proxy http://domain.tld/traggo to Traggo. upstream traggo { # Set the port to the one you are using in traggo server localhost : 3030 ; } server { listen 80 ; # If you're on localhost: # server_name localhost; server_name domain.tld ; location /traggo/ { proxy_pass http://traggo ; rewrite ^/traggo(/.*) $1 break ; } }","title":"At domain sub path like http://domain.tld/traggo/"},{"location":"reverse-proxy/#apache","text":"","title":"Apache"},{"location":"reverse-proxy/#at-domain-root-like-httpdomaintld_1","text":"Proxy http://domain.tld to Traggo. <VirtualHost *:80 > # If you're on localhost: # ServerName localhost ServerName domain.tld Keepalive On ProxyPass \"/\" http://localhost:3030/ retry=0 timeout=5 ProxyPassReverse / http://localhost:3030/ </VirtualHost>","title":"At domain root like http://domain.tld"},{"location":"reverse-proxy/#at-domain-sub-path-like-httpdomaintldtraggo_1","text":"Proxy http://domain.tld/traggo to Traggo. <VirtualHost *:80 > # If you're on localhost: # ServerName localhost ServerName domain.tld Keepalive On ProxyPass \"/traggo/\" http://localhost:3030/ retry=0 timeout=5 # ^- !!trailing slash is required!! ProxyPassReverse \"/traggo/\" http://localhost:3030/ </VirtualHost>","title":"At domain sub path like http://domain.tld/traggo/"},{"location":"reverse-proxy/#caddy-2","text":"","title":"Caddy 2"},{"location":"reverse-proxy/#at-domain-root-like-httpdomaintld_2","text":"Proxy http://domain.tld to Traggo. http://domain.tld { reverse_proxy localhost:3030 }","title":"At domain root like http://domain.tld"},{"location":"reverse-proxy/#at-domain-sub-path-like-httpdomaintldtraggo_2","text":"Proxy http://domain.tld/traggo to Traggo. http://domain.tld { route /traggo/* { uri strip_prefix /traggo reverse_proxy localhost:3030 } redir /traggo /traggo/ }","title":"At domain sub path like http://domain.tld/traggo/"},{"location":"terminology/","text":"Terminology \u00b6 User \u00b6 A user owns multiple Tagged TimeSpans , Dashboards and Devices . Admin-Users can manage other Users but they have no access to TimeSpans , Tags and Dashboards from others. Warning Server owners which have direct access to the database are able to read everything from all users. Device \u00b6 A device will be created when a User login with username/password. Each device may access the the users data like TimeSpans . Devices can be managed only by the User who created them. TimeSpan \u00b6 A timespan has a start and end date. Each timespan can have multiple Tags . Time spans can be managed only by the User who created them. Tag \u00b6 A tag has a key and a value. Tags normally have a format like this key:value (example: type:cooking ). Dashboard \u00b6 A dashboard contains multiple Dashboard Entries and Dashboard Ranges . Dashboards can be managed only by the User who created them. Dashboard Entry \u00b6 A dashboard entry is part of a Dashboard . It displays a configurable diagram of aggregated TimeSpans with specific Tags , a specific date-range and interval. This date range could be unique and only be used on one entry or the entry could use a configured Dashboard Range . The interval determines on what intervals the data should be aggregated. F.ex. daily would include the 24 hours of a day. Currently, the following diagram types are supported: bar chart stacked bar chart pie chart line chart Dashboard Range \u00b6 A dashboard range is a Static Range or a Relative Range which can be used for multiple Dashboard Entries . Static Range \u00b6 A static range has a concrete start and end point. Like f.ex. 10/12/1998 5:12 PM to 10/13/1998 5:12 PM. Relative Range \u00b6 A relative range is relative to now. You can use simple operations to subtract time from it. Examples \u00b6 Relative Range From To Last 10 minutes now-10m now This week now/w now/w Last week now-1w/w now-1w/w Last month now-1M/M now-1M/M Last weekend now-1w/w+5d now-1w/w Last week monday - friday now-1w/w now-1w/w-2d Units \u00b6 Shorthand Full s second m minute h hour d day w week M month y year Operations \u00b6 Opertaion Description + add X Unit - subtract X Unit / start of / end of Unit","title":"Terminology"},{"location":"terminology/#terminology","text":"","title":"Terminology"},{"location":"terminology/#user","text":"A user owns multiple Tagged TimeSpans , Dashboards and Devices . Admin-Users can manage other Users but they have no access to TimeSpans , Tags and Dashboards from others. Warning Server owners which have direct access to the database are able to read everything from all users.","title":"User"},{"location":"terminology/#device","text":"A device will be created when a User login with username/password. Each device may access the the users data like TimeSpans . Devices can be managed only by the User who created them.","title":"Device"},{"location":"terminology/#timespan","text":"A timespan has a start and end date. Each timespan can have multiple Tags . Time spans can be managed only by the User who created them.","title":"TimeSpan"},{"location":"terminology/#tag","text":"A tag has a key and a value. Tags normally have a format like this key:value (example: type:cooking ).","title":"Tag"},{"location":"terminology/#dashboard","text":"A dashboard contains multiple Dashboard Entries and Dashboard Ranges . Dashboards can be managed only by the User who created them.","title":"Dashboard"},{"location":"terminology/#dashboard-entry","text":"A dashboard entry is part of a Dashboard . It displays a configurable diagram of aggregated TimeSpans with specific Tags , a specific date-range and interval. This date range could be unique and only be used on one entry or the entry could use a configured Dashboard Range . The interval determines on what intervals the data should be aggregated. F.ex. daily would include the 24 hours of a day. Currently, the following diagram types are supported: bar chart stacked bar chart pie chart line chart","title":"Dashboard Entry"},{"location":"terminology/#dashboard-range","text":"A dashboard range is a Static Range or a Relative Range which can be used for multiple Dashboard Entries .","title":"Dashboard Range"},{"location":"terminology/#static-range","text":"A static range has a concrete start and end point. Like f.ex. 10/12/1998 5:12 PM to 10/13/1998 5:12 PM.","title":"Static Range"},{"location":"terminology/#relative-range","text":"A relative range is relative to now. You can use simple operations to subtract time from it.","title":"Relative Range"},{"location":"terminology/#examples","text":"Relative Range From To Last 10 minutes now-10m now This week now/w now/w Last week now-1w/w now-1w/w Last month now-1M/M now-1M/M Last weekend now-1w/w+5d now-1w/w Last week monday - friday now-1w/w now-1w/w-2d","title":"Examples"},{"location":"terminology/#units","text":"Shorthand Full s second m minute h hour d day w week M month y year","title":"Units"},{"location":"terminology/#operations","text":"Opertaion Description + add X Unit - subtract X Unit / start of / end of Unit","title":"Operations"},{"location":"dev/build/","text":"Build from sources \u00b6 The steps below require that you have setup your dev environment and have ran make generate . Node The project has a CGO reference (because of sqlite3), therefore a CGO cross compiler is needed for compiling for other platforms (the traggo/build docker images already contain the needed cross compilers). Build without docker \u00b6 You can build traggo/server with the following command: $ make build-bin-local Build with docker \u00b6 It is recommended to build traggo/server via the traggo/build docker images , this ensures that all the required tools are available (like f.ex. cross-compiler). Execute traggo/server Makefile tasks to build traggo/server. # builds all supported platforms $ make build-bin # builds a specific platform # available suffixes # * linux-amd64 # * linux-386 # * linux-arm-7 # * linux-arm64 # * linux-ppc64le # * linux-s390x # * windows-amd64 # * windows-386 # Build bin $ make build-bin-SUFFIX # Build docker image (requires bin build before) $ make build-docker-SUFFIX","title":"Building from Source"},{"location":"dev/build/#build-from-sources","text":"The steps below require that you have setup your dev environment and have ran make generate . Node The project has a CGO reference (because of sqlite3), therefore a CGO cross compiler is needed for compiling for other platforms (the traggo/build docker images already contain the needed cross compilers).","title":"Build from sources"},{"location":"dev/build/#build-without-docker","text":"You can build traggo/server with the following command: $ make build-bin-local","title":"Build without docker"},{"location":"dev/build/#build-with-docker","text":"It is recommended to build traggo/server via the traggo/build docker images , this ensures that all the required tools are available (like f.ex. cross-compiler). Execute traggo/server Makefile tasks to build traggo/server. # builds all supported platforms $ make build-bin # builds a specific platform # available suffixes # * linux-amd64 # * linux-386 # * linux-arm-7 # * linux-arm64 # * linux-ppc64le # * linux-s390x # * windows-amd64 # * windows-386 # Build bin $ make build-bin-SUFFIX # Build docker image (requires bin build before) $ make build-docker-SUFFIX","title":"Build with docker"},{"location":"dev/setup/","text":"Setup Developer Environment \u00b6 Requirements \u00b6 Go 1.12+ Node 11.x Yarn 9+ Docker (optional) Clone sources \u00b6 Clone traggo/server source from git: $ git clone https://github.com/traggo/server.git && cd server Env Variables \u00b6 If you are in GOPATH, enable go modules explicitly: $ export GO111MODULE = on Download tools \u00b6 This contains tools for formatting and linting. $ make download-tools Install dependencies \u00b6 Install Go and Yarn dependencies. # make install Code Generation \u00b6 The server and ui depends heavily on graphql, for this we use code generators which generate models and resolvers from our schema.graphql . The following command shoud be executed after any change to the file. $ make generate Formatting Code \u00b6 Both the server and the ui uses tooling for formatting the code. You can format all files with: $ make format Linting \u00b6 We use multiple linters for our code. You can run them all with $ make lint Starting the server \u00b6 $ go run main.go This starts the traggo server on localhost3030 . Node When traggo is started in dev mode (which is by default enabled) then it will load additional config files. Normal Env Variables .env.development.local .env.development The rest from Configuration#precedence . The .env.development.local -file should be used for local changes as it is git ignored. Starting the React-UI \u00b6 Commands must be executed inside the ui directory. $ yarn start The ui development server will be started on localhost:3000 .","title":"Setup Environment"},{"location":"dev/setup/#setup-developer-environment","text":"","title":"Setup Developer Environment"},{"location":"dev/setup/#requirements","text":"Go 1.12+ Node 11.x Yarn 9+ Docker (optional)","title":"Requirements"},{"location":"dev/setup/#clone-sources","text":"Clone traggo/server source from git: $ git clone https://github.com/traggo/server.git && cd server","title":"Clone sources"},{"location":"dev/setup/#env-variables","text":"If you are in GOPATH, enable go modules explicitly: $ export GO111MODULE = on","title":"Env Variables"},{"location":"dev/setup/#download-tools","text":"This contains tools for formatting and linting. $ make download-tools","title":"Download tools"},{"location":"dev/setup/#install-dependencies","text":"Install Go and Yarn dependencies. # make install","title":"Install dependencies"},{"location":"dev/setup/#code-generation","text":"The server and ui depends heavily on graphql, for this we use code generators which generate models and resolvers from our schema.graphql . The following command shoud be executed after any change to the file. $ make generate","title":"Code Generation"},{"location":"dev/setup/#formatting-code","text":"Both the server and the ui uses tooling for formatting the code. You can format all files with: $ make format","title":"Formatting Code"},{"location":"dev/setup/#linting","text":"We use multiple linters for our code. You can run them all with $ make lint","title":"Linting"},{"location":"dev/setup/#starting-the-server","text":"$ go run main.go This starts the traggo server on localhost3030 . Node When traggo is started in dev mode (which is by default enabled) then it will load additional config files. Normal Env Variables .env.development.local .env.development The rest from Configuration#precedence . The .env.development.local -file should be used for local changes as it is git ignored.","title":"Starting the server"},{"location":"dev/setup/#starting-the-react-ui","text":"Commands must be executed inside the ui directory. $ yarn start The ui development server will be started on localhost:3000 .","title":"Starting the React-UI"},{"location":"dev/timezones/","text":"Fun with time zones \u00b6 TODO","title":"Timezones"},{"location":"dev/timezones/#fun-with-time-zones","text":"TODO","title":"Fun with time zones"}]}